#pragma once

#include <cstddef>
#include <cstdint>

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//  std typdefs        /////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

using std::int8_t;
using std::int16_t;
using std::int32_t;
using std::int64_t;

using std::uint8_t;
using std::uint16_t;
using std::uint32_t;
using std::uint64_t;

using std::size_t;

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//  Shmitcore Standard Types        ////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

namespace shmit
{

/// @brief Provides symbolic representation of a memory address
typedef void* MemoryAddress;

namespace size
{

/**
 * @brief Represents the size of a primitive data type (byte/word aligned)
 */
enum Primitive : uint8_t
{
    e8Bits  = 8,
    e16Bits = 16,
    e32Bits = 32,
    e64Bits = 64
};

} // End namespace size
} // End namespace shmit