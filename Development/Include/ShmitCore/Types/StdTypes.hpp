#pragma once

#include <cstddef>
#include <cstdint>

namespace shmit
{

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//  std typdefs        /////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

using int8_t  = std::int_least8_t;
using int16_t = std::int_least16_t;
using int32_t = std::int_least32_t;
using int64_t = std::int_least64_t;

using uint8_t  = std::uint_least8_t;
using uint16_t = std::uint_least16_t;
using uint32_t = std::uint_least32_t;
using uint64_t = std::uint_least64_t;

using std::size_t;
using std::intmax_t;

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//  Shmitcore Standard Types        ////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

/// @brief Provides symbolic representation of a memory address
typedef void* MemoryAddress;

namespace size
{

/**
 * @brief Represents the size of a primitive data type (byte/word aligned)
 */
enum Primitive : uint8_t
{
    e8Bits  = 8,
    e16Bits = 16,
    e32Bits = 32,
    e64Bits = 64
};

} // End namespace size
} // End namespace shmit